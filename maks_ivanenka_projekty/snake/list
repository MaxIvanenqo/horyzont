# 1 "/home/max/Documents/Study/Code/Exersises_horyzont/Cpp/IV/snake/list.cpp"
# 1 "/usr/bin//"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 1 "<command-line>" 2
# 1 "/home/max/Documents/Study/Code/Exersises_horyzont/Cpp/IV/snake/list.cpp"
# 1 "/home/max/Documents/Study/Code/Exersises_horyzont/Cpp/IV/snake/list.h" 1
       
# 1 "/home/max/Documents/Study/Code/Exersises_horyzont/Cpp/IV/snake/node.h" 1
       
template<typename T>
class Node{
 public:
   Node * pPrev;
   Node * pNext;
   T data;
 Node(T data = T(), Node *pNext = nullptr){
  this->data = data;
  this->pNext = pNext;
  this->pPrev = nullptr;
 }
 ~Node(){
  delete pPrev;
  delete pNext;
 }
};
# 3 "/home/max/Documents/Study/Code/Exersises_horyzont/Cpp/IV/snake/list.h" 2
template<typename T>
class List
{
public:
 List():size_(0), head(nullptr) { };
 ~List() { };
 int getSize() {return size_; };
 void clear();
 void pop_front();
 void insert(const int i, T data);
 void push_front(T data);
 void push_back(T data);
 T & operator[](const int i);

private:
 Node<T> *head;
 int size_;
};
# 2 "/home/max/Documents/Study/Code/Exersises_horyzont/Cpp/IV/snake/list.cpp" 2
template<class T>
void List<T>::push_back(T data){
 if (this->head == nullptr){
  Node<T> * current = new Node<T>(data, nullptr);
  this->head = current;
 }
 else {
  Node<T> * current = this->head;
  while (current->pNext != nullptr){
   current = current->pNext;
  }
  current->pNext = new Node<T>(data, nullptr);
 }
 size_++;
}


template<class T>
void List<T>::push_front(T data){
 head = new Node<T>(data, head);
 size_++;
}


template<class T>
void List<T>::insert(const int i, T data){
 if (i == 0) push_front(data);
 else{
  Node<T> *prev = this->head;
  int counter = 0;
  while (counter < i-1){
   counter++;
   prev = prev->pNext;
  }
  Node<T> *tmp = new Node<T>(data, prev->pNext);
  prev->pNext = tmp;
  size_++;
 }
}

template<class T>
void List<T>::pop_front(){
 Node<T> *tmp = head;
 head = head->pNext;
 delete tmp;
 size_--;
}


template<class T>
void List<T>::clear(){
 while (size_ >= 0)
  pop_front();
}


template<class T>
T & List<T>::operator[](const int i){
  Node<T> * current = this->head;
  int counter = 0;
  while (current != nullptr){
   if (counter == i){
    return current->data;
   }
   else{
    current = current->pNext;
    counter++;
   }
  }
 }
